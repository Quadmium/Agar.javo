#BlueJ class context
comment0.params=
comment0.target=Vector2D()
comment0.text=\r\n\ (non-Javadoc)\r\n\ \r\n\ @see\ java.awt.geom.Point2D.Double\#Point2D.Double()\r\n
comment1.params=x\ y
comment1.target=Vector2D(double,\ double)
comment1.text=\r\n\ (non-Javadoc)\r\n\ \r\n\ @see\ java.awt.geom.Point2D.Double\#Point2D.Double()\r\n
comment10.params=rhs
comment10.target=Vector2D\ minus(Vector2D)
comment10.text=The\ difference\ of\ the\ vector\ and\ rhs\:\ this\ -\ rhs
comment11.params=rhs
comment11.target=boolean\ equals(Vector2D)
comment12.params=scalar
comment12.target=Vector2D\ scalarMult(double)
comment12.text=Product\ of\ the\ vector\ and\ scalar
comment13.params=rhs
comment13.target=double\ dotProduct(Vector2D)
comment13.text=Dot\ product\ of\ the\ vector\ and\ rhs
comment14.params=rhs
comment14.target=double\ crossProduct(Vector2D)
comment14.text=\r\n\ Since\ Vector2D\ works\ only\ in\ the\ x-y\ plane,\ (u\ x\ v)\ points\ directly\ along\r\n\ the\ z\ axis.\ This\ function\ returns\ the\ value\ on\ the\ z\ axis\ that\ (u\ x\ v)\r\n\ reaches.\r\n\ \r\n\ @return\ signed\ magnitude\ of\ (this\ x\ rhs)\r\n
comment15.params=
comment15.target=double\ componentProduct()
comment15.text=Product\ of\ components\ of\ the\ vector\:\ compenentProduct(\ <x\ y>)\ \=\ x*y.
comment16.params=rhs
comment16.target=Vector2D\ componentwiseProduct(Vector2D)
comment16.text=Componentwise\ product\:\ <this.x*rhs.x,\ this.y*rhs.y>
comment17.params=
comment17.target=double\ length()
comment17.text=\r\n\ An\ alias\ for\ getR()\r\n\ @return\ the\ length\ of\ this\r\n
comment18.params=
comment18.target=Vector2D\ unitVector()
comment18.text=\r\n\ Returns\ a\ new\ vector\ with\ the\ same\ direction\ as\ the\ vector\ but\ with\r\n\ length\ 1,\ except\ in\ the\ case\ of\ zero\ vectors,\ which\ return\ a\ copy\ of\r\n\ themselves.\r\n
comment19.params=
comment19.target=Vector2D\ toPolar()
comment19.text=Polar\ version\ of\ the\ vector,\ with\ radius\ in\ x\ and\ angle\ in\ y
comment2.params=v
comment2.target=Vector2D(Vector2D)
comment2.text=\r\n\ Copy\ constructor\r\n
comment20.params=
comment20.target=Vector2D\ toRect()
comment20.text=Rectangular\ version\ of\ the\ vector,\ assuming\ radius\ in\ x\ and\ angle\ in\ y
comment21.params=
comment21.target=java.lang.String\ toString()
comment21.text=@return\ Standard\ string\ representation\ of\ a\ vector\:\ "<x,\ y>"
comment3.params=
comment3.target=double\ getR()
comment3.text=\r\n\ @return\ the\ radius\ (length,\ modulus)\ of\ the\ vector\ in\ polar\ coordinates\r\n
comment4.params=
comment4.target=double\ getTheta()
comment4.text=\r\n\ @return\ the\ angle\ (argument)\ of\ the\ vector\ in\ polar\ coordinates\ in\ the\r\n\ \ \ \ \ \ \ \ \ range\ [-pi/2,\ pi/2]\r\n
comment5.params=x\ y
comment5.target=void\ set(double,\ double)
comment5.text=\r\n\ (non-Javadoc)\r\n\ \r\n\ @see\ java.awt.geom.Point2D.Double\#setLocation(double,\ double)\r\n
comment6.params=r\ t
comment6.target=void\ setPolar(double,\ double)
comment6.text=\r\n\ Sets\ the\ vector\ given\ polar\ arguments.\r\n\ \r\n\ @param\ r\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ new\ radius\r\n\ @param\ t\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ new\ angle,\ in\ radians\r\n
comment7.params=r
comment7.target=void\ setR(double)
comment7.text=Sets\ the\ vector's\ radius,\ preserving\ its\ angle.
comment8.params=t
comment8.target=void\ setTheta(double)
comment8.text=Sets\ the\ vector's\ angle,\ preserving\ its\ radius.
comment9.params=rhs
comment9.target=Vector2D\ plus(Vector2D)
comment9.text=The\ sum\ of\ the\ vector\ and\ rhs
numComments=22
